openapi: 3.0.0
info:
  title: Job-api
  description: It's a job-api where you can perform login, register and CRUD operation.
  contact:
    name: Keshav Carpenter
    url: https://jobs-api-v1-n0gv.onrender.com/
    email: 20uec068@lnmiit.ac.in
  version: '1.0'
servers:
- url: https://jobs-api-v1-n0gv.onrender.com/api/v1
  variables: {}
paths:
  /jobs:
    get:
      tags:
      - Jobs
      summary: All jobs
      operationId: Alljobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    post:
      tags:
      - Jobs
      summary: create job
      operationId: createjob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /jobs/{id}:
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The job ID
      get:
        tags:
        - Jobs
        summary: get single job
        operationId: getsinglejob
        responses:
          '200':
            description: ''
            headers: {}
        deprecated: false
      patch:
        tags:
        - Jobs
        summary: Update jobs
        operationId: Updatejobs
        parameters : []
        requestBody:
          description: ''
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/UpdatejobsRequest'
                - example:
                    company: OYO
                    position: Full Stack Dev
                    status: interview
          required: true
        responses:
          '200':
            description: ''
            headers: {}
        deprecated: false
      delete:
          tags:
          - Jobs
          summary: Delete job
          operationId: Deletejob
          responses:
            '200':
              description: ''
              headers: {}
          deprecated: false
  /auth/register:
    post:
      tags:
      - Auth
      summary: register user
      operationId: registeruser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/registeruserrequest'
              - example:
                  name: opUser
                  email: test@job.com
                  password: '123456'
            example:
              name: opUser
              email: test@job.com
              password: '123456'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
      - Auth
      summary: login user
      operationId: loginuser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/loginuserrequest'
              - example:
                  email: test@job.com
                  password: '123456'
            example:
              email: test@job.com
              password: '123456'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
components:
  schemas:
    UpdatejobsRequest:
      title: UpdatejobsRequest
      required:
      - company
      - position
      - status
      type: object
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
      example:
        company: OYO
        position: Full Stack Dev
        status: interview
    registeruserrequest:
      title: registeruserrequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: opUser
        email: test@job.com
        password: '123456'
    loginuserrequest:
      title: loginuserrequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: test@job.com
        password: '123456'
  securitySchemes:
    bearer:
      type: https
      scheme: bearer
security: []
tags:
- name: Jobs
  description: ''
- name: Auth
  description: ''
